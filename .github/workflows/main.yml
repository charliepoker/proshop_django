# name: ProShop CI

# on: 
#     push:
#         branches: [master]
#     pull_request:
#         branches: [master]

# jobs:
#     build:
#         runs-on: ubuntu-latest

#         env:
#             RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
#             RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
#             RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
#             RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}

#         strategy:
#             matrix:
#                 python-version: [3.x]
#                 node-version: [16.x]

#         steps:
#         - name: Checkout code
#           uses: actions/checkout@v4

#         - name: Set up Python 
#           uses: actions/setup-python@v5
#           with:
#             python-version: ${{ matrix.python-version }}
#             cache: 'pip'

#         - name: Install dependencies 
#           run: |
#             python -m pip install --upgrade pip
#             pip install -r requirements.txt

#         - name: Run tests
#           run: python manage.py test

#         - name: Set up Nodejs
#           uses: actions/setup-node@v4
#           with:
#             node-version: ${{ matrix.node-version }}

  
#         - name: Install frontend dependencies
#           working-directory: frontend
#           # run: npm ci --legacy-peer-deps
#           run: npm install

#         - name: Lint Code
#           working-directory: frontend
#           run: npm run lint || true # Ignore failures

#         - name: Build frontend
#           working-directory: frontend
#           env:
#             CI: false
#           run: |
#            export DISABLE_ESLINT_PLUGIN=true
#            npm run build --if-present 




name: ProShop CI

on: 
  push:          # Trigger workflow on pushes to the master branch
    branches: [master]
  pull_request:  # Trigger workflow on pull requests targeting the master branch
    branches: [master]

jobs:
  # Build and test job
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    env:
      # Load RDS database secrets into environment variables
      RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}

    strategy:
      matrix:
        # Define test environments
        python-version: [3.x]  # Python version for backend
        node-version: [16.x]  # Node.js version for frontend

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Python environment
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}  # Use Python version from the matrix
        cache: 'pip'  # Cache pip dependencies

    # Install Python dependencies
    - name: Install dependencies 
      run: |
        python -m pip install --upgrade pip  # Upgrade pip
        pip install -r requirements.txt  # Install dependencies from requirements.txt

    # Run backend tests
    - name: Run tests
      run: python manage.py test

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}  # Use Node.js version from the matrix

    # Install frontend dependencies
    - name: Install frontend dependencies
      working-directory: frontend  # Change working directory to frontend
      run: npm install  # Install dependencies

    # Lint frontend code
    - name: Lint Code
      working-directory: frontend
      run: npm run lint || true  # Ignore failures (useful for non-blocking checks)

    # Build the frontend
    - name: Build frontend
      working-directory: frontend
      env:
        CI: false  # Disable CI for npm (to avoid warnings)
      run: |
        export DISABLE_ESLINT_PLUGIN=true  # Disable ESLint during the build
        npm run build --if-present  # Build the frontend if build script exists

  # Docker Build and Push Job
  push_to_docker_register:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: build  # Run this job after the build job completes

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2  # Docker Hub login action
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username (from secrets)
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password (from secrets)


    - name: Increment version
      id: version
      run: |
        VERSION=v$(git rev-list --count HEAD)
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        docker build --progress=plain -t ${{ secrets.DOCKER_USERNAME }}/proshop-backend:${{ env.version }} -f Dockerfile . || exit 1
        docker push --verbose ${{ secrets.DOCKER_USERNAME }}/proshop-backend:${{ env.version }} || exit 1

    # Build and push frontend Docker image
    - name: Build and push frontend Docker image
      working-directory: frontend  # Change working directory to frontend
      run: |
        docker build --progress=plain -t ${{ secrets.DOCKER_USERNAME }}/proshop-frontend:${{ env.version }} -f Dockerfile .   || exit 1 # Build frontend image
        docker push --verbose ${{ secrets.DOCKER_USERNAME }}/proshop-frontend:${{ env.version }}  || exit 1 # Push frontend image to Docker Hub